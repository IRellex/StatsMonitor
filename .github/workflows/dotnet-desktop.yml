name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.x'  # Specify your .NET version here

    # Restore NuGet packages for all solutions
    - name: Restore NuGet packages
      run: |
        IFS=$'\n'
        for solution in $(find "$PWD" -name '*.sln'); do
          echo "Restoring NuGet packages for solution: $solution"
          dotnet restore "$solution"
        done
      shell: bash

    # Build all solutions
    - name: Build solutions
      run: |
        IFS=$'\n'
        for solution in $(find "$PWD" -name '*.sln'); do
          echo "Building solution: $solution"
          dotnet build "$solution" --configuration Release --no-restore
        done
      shell: bash

    # Publish all solutions
    - name: Publish solutions
      run: |
        IFS=$'\n'
        for solution in $(find "$PWD" -name '*.sln'); do
          echo "Publishing solution: $solution"
          dotnet publish "$solution" --configuration Release --no-restore --output "./publish/Release/$(basename "$solution" .sln)"
        done
      shell: bash

    # Bump version
    - name: Bump version
      id: bump_version
      run: |
        versionFile="version.txt"
        if [ ! -f "$versionFile" ]; then
          echo "1.0.0" > "$versionFile"
        fi
        currentVersion=$(cat "$versionFile")
        IFS='.' read -r -a versionParts <<< "$currentVersion"
        newVersion="${versionParts[0]}.${versionParts[1]}.$((versionParts[2]+1))"
        echo "$newVersion" > "$versionFile"
        echo "new_version=$newVersion" >> $GITHUB_ENV
        echo "New version: $newVersion"
      shell: bash

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-app-Release
        path: ./publish/Release

    # Create a GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release ${{ env.new_version }}
        body: |
          ## Changes
          - Automated release for version ${{ env.new_version }}
        draft: false
        prerelease: false

    # Upload Release Assets
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish/Release
        asset_name: published-app-Release
        asset_content_type: application/zip
